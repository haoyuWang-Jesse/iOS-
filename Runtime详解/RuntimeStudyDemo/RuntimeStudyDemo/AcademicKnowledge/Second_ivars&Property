runtime 第二节 成员变量和属性

1、类型编码
    字作为对runtime的补充，编译器将每个方法的返回值和参数类型编码成一个字符串，并将其与方法的selector关联在一起。这种编码方案在其它情况下也是非常有用的，因此我们可以使用@encode编译器指令来获取它。当给定一个类型时，@encode返回这个类型的字符串编码。类型可以是诸如int、指针这样的基本类型，也可以是结构体、类等类型。事实上，任何可以作为sizeof()操作参数的类型都可以用@encode()来获取到对应的类型编码。
具体细节参看官方文档：https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1

2、成员变量、属性
    2.1 基础数据类型
        2.1.1 Ivar
        <#Ivar#> 表示一个实例变量的类型，其实际是一个指向objc_ivar结构体的指针。定义如下：

            typedef struct objc_ivar *Ivar;

            struct objc_ivar {
            char *ivar_name               	OBJC2_UNAVAILABLE;	// 变量名
            char *ivar_type             	OBJC2_UNAVAILABLE;	// 变量类型
            int ivar_offset            		OBJC2_UNAVAILABLE;	// 基地址偏移字节
            #ifdef __LP64__
            int space                 		OBJC2_UNAVAILABLE;
            #endif
            }

        2.1.2 objc_property_t
        <#objc_property_t#> 是表示OC声明的属性的类型，其实际是指向objc_property结构体的指针。定义如下：

        typedef struct objc_property *objc_property_t;

        2.1.3 objc_property_attribute_t
        <#objc_property_attribute_t#> 定义了属性的特性（attribute），它是一个结构体，定义如下：
        特性是指：属性的修饰符中automatic、strong  等 ？？？

    2.2 关联对象（Associated Object）
    为了解决：在category中不能添加新的成员变量的问题。（注意区分：是成员变量而不是属性，想要添加属性，可以通过其他方法替代成员变量的方式来曲折实现）而提出的解决方案。
    （1）我们可以把关联对象想象成一个Objective-C对象(如字典)，这个对象通过给定的key连接到类的一个实例上。不过由于使用的是C接口，所以key是一个void指针(const void *)。
    （2）我们还需要指定一个内存管理策略，以告诉Runtime如何管理这个对象的内存。这个内存管理的策略可以由以下值指定：
        OBJC_ASSOCIATION_ASSIGN
        OBJC_ASSOCIATION_RETAIN_NONATOMIC
        OBJC_ASSOCIATION_COPY_NONATOMIC
        OBJC_ASSOCIATION_RETAIN
        OBJC_ASSOCIATION_COPY
    （3）关联对象的释放：当宿主对象被释放时，会根据指定的内存管理策略来处理关联对象：
        如果指定的策略是assign，则宿主释放时，关联对象不会被释放；
        而如果指定的是retain或者是copy，则宿主释放时，关联对象会被释放。
        多线程情况下：甚至可以选择是否是自动retain/copy。即：原子性和非原子性。
    （4）操作函数：
        //添加关联对象
        static char myKey;
        objc_setAssociatedObject(self, &myKey, anObject, OBJC_ASSOCIATION_RETAIN);
        注：如果我们使用<#同一个key#>来关联另外一个对象时，也会自动释放之前关联的对象，这种情况下，先前的关联对象会被妥善地处理掉，<#并且新的对象会使用它的内存#>。

        //移除关联对象
        objc_removeAssociatedObjects（ id object）
        注：我们可以使用objc_removeAssociatedObjects函数来移除一个关联对象，或者使用objc_setAssociatedObject函数将key指定的关联对象设置为nil。

        //获取关联对象
        id anObject = objc_getAssociatedObject(self, &myKey);
    (5) 关联对象，本人有更为详细的讲解，可参考关联对象的demo。

    2.3 成员变量、属性的操作方法
        2.3.1 <#成员变量#>---成员变量的操作函数如下：
        //获取成员变量名
        const char * ivar_getName(Ivar v);
        //获取成员变量类型编码
        const char * ivar_getTypeEncoding(Ivar v);
        //获取成员变量的偏移量
        ptrdiff_t ivar_getOffset ( Ivar v );
        注意：ivar_getOffset函数，对于类型id或其它对象类型的实例变量，可以调用object_getIvar和object_setIvar来直接访问成员变量，而不使用偏移。 ？？？？？

        2.3.2 <#关联对象#>
        // 设置关联对象
        void objc_setAssociatedObject ( id object, const void *key, id value, objc_AssociationPolicy policy );
        // 获取关联对象
        id objc_getAssociatedObject ( id object, const void *key );
        // 移除关联对象
        void objc_removeAssociatedObjects ( id object );

        2.3.3 <#属性#>
        // 获取属性名
        const char * property_getName ( objc_property_t property );
        // 获取属性特性描述字符串（属性对应的特性有多个）
        const char * property_getAttributes ( objc_property_t property );
        // 获取属性中指定的特性的值
        char * property_copyAttributeValue ( objc_property_t property, const char *attributeName );
        // 获取属性的特性列表
        objc_property_attribute_t * property_copyAttributeList ( objc_property_t property, unsigned int *outCount );

        注意：
        <#property_copyAttributeValue#>函数，返回的char *在使用完后需要调用free()释放。
        <#property_copyAttributeList#>函数，返回值在使用完后需要调用free()释放。

        问：特性到底是指什么 ？？？？？？？？？？？？？？？？？？？？？
        需要出个demo，验证下：

3、实例：
    假定这样一个场景，我们从服务端两个不同的接口获取相同的字典数据，但这两个接口是由两个人写的，相同的信息使用了不同的字段表示。我们在接收到数据时，可将这些数据保存在相同的对象中。








